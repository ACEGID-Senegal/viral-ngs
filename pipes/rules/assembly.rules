"""
    This is a basic framework for depleting human and other contaminant 
    reads from NGS data.  All non-human reads should remain behind.
"""

__author__ = 'Kristian Andersen <andersen@broadinstitute.org>'

from snakemake.utils import makedirs
import os, os.path

configfile: "config.json"

def read_samples_file(fname):
    with open(fname, 'rt') as inf:
        for line in inf:
            yield line.strip()

rule all_assemble:
    # these are the final desired output files from this pipeline
    input:
        expand("{dataDir}/{subdir}/{sample}.fasta",
            dataDir=config["dataDir"], subdir=config["subdirs"]["assembly"],
            sample=read_samples_file(config["samples_file"])),
        expand("{dataDir}/{subdir}/{sample}.aligned_to_{sample}.bam",
            dataDir=config["dataDir"], subdir=config["subdirs"]["assembly"],
            sample=read_samples_file(config["samples_file"]))
    params: LSF="-N"
    shell:  "echo all done!"

rule assembly_bam_to_fastq:
    input:  config["dataDir"]+'/'+config["subdirs"]["depletion"]+'/{sample,\w+}.cleaned.bam'
    output: config["tmpDir"] +'/'+config["subdirs"]["assembly"] +'/{sample}.cleaned.1.fastq', 
            config["tmpDir"] +'/'+config["subdirs"]["assembly"] +'/{sample}.cleaned.2.fastq', 
            config["tmpDir"] +'/'+config["subdirs"]["assembly"] +'/{sample}.cleaned.samheader.txt'
    params: LSF='-W 4:00 -M 6 -R "rusage[mem=3]"',
            logid="{sample}"
    run:
            makedirs(expand("{dir}/{subdir}",
                dir=[config["dataDir"],config["tmpDir"]],
                subdir=config["subdirs"]["assembly"]))
            shell("{config[binDir]}/read_utils.py bam_to_fastq {input} {output[0]} {output[1]} --outHeader {output[2]}")

rule trim_reads:
    input:  '{dir}/{sample}.cleaned.1.fastq', '{dir}/{sample}.cleaned.2.fastq'
    output: '{dir}/{sample}.trimmed.1.fastq', '{dir}/{sample}.trimmed.2.fastq'
    params: LSF='-W 4:00',
            clipDb=config["trim_clipDb"],
            logid="{sample}"
    shell:  "{config[binDir]}/taxon_filter.py trim_trimmomatic {input} {output} {params.clipDb}"

rule filter_to_taxon:
    input:  '{dir}/{sample}.trimmed.{direction}.fastq'
    output: '{dir}/{sample}.filtered.{direction,[12]}.fastq'
    params: LSF='-W 4:00 -R "rusage[mem=12]" -M 24',
            refDbs=config["lastal_refDb"],
            logid="{sample}-{direction}"
    shell:  "{config[binDir]}/taxon_filter.py filter_lastal {input} {params.refDbs} {output}"

rule fix_lastal_output:
    input:  '{dir}/{sample}.filtered.1.fastq',
            '{dir}/{sample}.filtered.2.fastq'
    output: '{dir}/{sample}.filtered.fix.1.fastq',
            '{dir}/{sample}.filtered.fix.2.fastq'
    params: LSF='-R "rusage[mem=3]" -M 6',
            logid="{sample}"
    shell:  "{config[binDir]}/read_utils.py purge_unmated {input} {output}"

rule assemble_trinity:
    input:  '{dir}/{sample}.filtered.fix.1.fastq',
            '{dir}/{sample}.filtered.fix.2.fastq'
    output: '{dir}/{sample}.assembly1.fasta'
    params: LSF='-W 4:00 -R "rusage[mem=4]" -M 8',
            logid="{sample}",
            tmpf_subsamp=['{dir}/{sample}.filtered.fix.sub.1.fastq',
                '{dir}/{sample}.filtered.fix.sub.2.fastq'],
            tmpd_trinity='{dir}/{sample}.trinity'
    # TODO: replace with python wrapper
    #shell:  "{config[binDir]}/consensus.py assemble_trinity {input} {output}"
    shell:  "reuse -q Java-1.6 && " + \
            "{config[binDir]}/scripts/subsampler.py -n 100000 -mode p -in {input} -out {params.tmpf_subsamp} && " + \
            "perl /idi/sabeti-scratch/kandersen/bin/trinity_old/Trinity.pl --CPU 1 --min_contig_length 300 --seqType fq --left {params.tmpf_subsamp[0]} --right {params.tmpf_subsamp[1]} --output {params.tmpd_trinity} && " + \
            "mv {params.tmpd_trinity}/Trinity.fasta {output} && " + \
            "rm -rf {params.tmpf_subsamp} {params.tmpd_trinity}"

rule align_and_orient:
    # VFAT / Bellini
    input:  '{dir}/{sample}.assembly1.fasta',
            '{dir}/{sample}.filtered.fix.1.fastq',
            '{dir}/{sample}.filtered.fix.2.fastq'
    output: '{dir}/{sample}.assembly2.fasta'
    params: LSF='-W 4:00 -R "rusage[mem=3]" -M 6',
            refGenome=config["ref_genome"],
            logid="{sample}",
            tmpf_prefix='{dir}/{sample}.assembly1.5'
    # TODO: replace with python wrapper
    #shell:  "{config[binDir]}/consensus.py align_and_orient {input} {params.refGenome} {output}"
    shell:  "touch {params.tmpf_prefix}_merger_assembly.fa && " + \
            "{config[binDir]}/scripts/vfat/orientContig.pl {input[0]} {params.refGenome} {params.tmpf_prefix} && " + \
            "{config[binDir]}/scripts/vfat/contigMerger.pl {params.tmpf_prefix}_orientedContigs {params.refGenome} -readfq {input[1]} -readfq2 {input[2]} -fakequals 30 {params.tmpf_prefix} && " + \
            "cat {params.tmpf_prefix}*assembly.fa > {output} && " + \
            "rm -rf {params.tmpf_prefix}*"

def delete_empty_file(fname):
    if os.path.getsize(fname)==0:
        os.unlink(fname)

rule filter_short_contigs:
    input:  '{dir}/{sample}.assembly2.fasta'
    output: '{dir}/{sample}.assembly3.fasta'
    params: length="15000", logid="{sample}"
    run:
            shell("{config[binDir]}/consensus.py filter_short_seqs {input} {params.length} {output}")
            delete_empty_file(output[0])

def index_picard(fasta):
    # TODO: replace with python wrapper
    outfname = fasta[:-6] + '.dict'
    shell("java -Xmx2g -jar /seq/software/picard/current/bin/CreateSequenceDictionary.jar R={fasta} O={outfname}")
def index_samtools(fasta):
    # TODO: replace with python wrapper
    shell("samtools faidx {fasta}")
def index_novoalign(fasta):
    # TODO: replace with python wrapper
    outfname = fasta[:-6] + '.nix'
    shell("/idi/sabeti-scratch/kandersen/bin/novocraft/novoindex {outfname} {fasta}")
def deambig_fasta(inf, outf):
    shell("{config[binDir]}/consensus.py deambig_fasta {inf} {outf}")
def vcf_to_fasta(inVcf, outFasta, options=""):
    shell("{config[binDir]}/consensus.py vcf_to_fasta {inVcf} {outFasta} {options}")
def novoalign(reads1, reads2, refFasta, sample_name, outBam, options="-r Random", min_qual=0):
    # TODO: replace with python wrapper
    refFastaIdx = refFasta[:-6] + '.nix'
    cmd = "/idi/sabeti-scratch/kandersen/bin/novocraft_v3/novoalign -f {reads1} {reads2} {options} -F STDFQ -d {refFastaIdx} -o SAM $'@RG\tID:{sample_name}\tSM:{sample_name}\tPL:Illumina\tPU:HiSeq\tLB:BroadPE\tCN:Broad'"
    if min_qual>0:
      cmd += "| samtools view -buS -q {min_qual} - "
    cmd += "| java -Xmx2g -jar /seq/software/picard/current/bin/SortSam.jar SO=coordinate I=/dev/stdin O={outBam} CREATE_INDEX=true VALIDATION_STRINGENCY=SILENT"
    shell(cmd)
def filter_bam_mapped_only(inBam, outBam):
    # TODO: replace with python wrapper
    shell("samtools view -b -q 1 -u {inBam} | java -Xmx2g -jar /seq/software/picard/current/bin/SortSam.jar SO=coordinate I=/dev/stdin O={outBam} CREATE_INDEX=true VALIDATION_STRINGENCY=SILENT")
def picard_rmdup(inBam, outBam):
    # TODO: replace with python wrapper
    shell("java -Xmx2g -jar /seq/software/picard/current/bin/MarkDuplicates.jar I={inBam} O={outBam} CREATE_INDEX=true REMOVE_DUPLICATES=true")
def gatk_ug(inBam, refFasta, outVcf, options="--min_base_quality_score 15 -ploidy 4"):
    # TODO: replace with python wrapper
    shell("java -Xmx2g -jar /humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar -T UnifiedGenotyper -R {refFasta} -I {inBam} -o {outVcf} {options} --baq OFF --useOriginalQualities -out_mode EMIT_ALL_SITES -dt NONE --num_threads 1 -stand_call_conf 0 -stand_emit_conf 0 -A AlleleBalance")

rule refine_assembly_with_reads:
    input:  config["tmpDir"] +'/'+config["subdirs"]["assembly"]+'/{sample}.assembly3.fasta',
            config["tmpDir"] +'/'+config["subdirs"]["assembly"]+'/{sample}.cleaned.1.fastq',
            config["tmpDir"] +'/'+config["subdirs"]["assembly"]+'/{sample}.cleaned.2.fastq'
    output: config["dataDir"]+'/'+config["subdirs"]["assembly"]+'/{sample}.fasta',
            config["tmpDir"] +'/'+config["subdirs"]["assembly"]+'/{sample}.muscle_align.fasta',
            config["tmpDir"] +'/'+config["subdirs"]["assembly"]+'/{sample}.muscle_modify.fasta',
            config["tmpDir"] +'/'+config["subdirs"]["assembly"]+'/{sample}.muscle_deambig.fasta',
            config["tmpDir"] +'/'+config["subdirs"]["assembly"]+'/{sample}.muscle_modify.bam',
            config["tmpDir"] +'/'+config["subdirs"]["assembly"]+'/{sample}.muscle_modify.vcf',
            config["tmpDir"] +'/'+config["subdirs"]["assembly"]+'/{sample}.refined.fasta',
            config["tmpDir"] +'/'+config["subdirs"]["assembly"]+'/{sample}.refined_deambig.fasta',
            config["tmpDir"] +'/'+config["subdirs"]["assembly"]+'/{sample}.refined.bam',
            config["tmpDir"] +'/'+config["subdirs"]["assembly"]+'/{sample}.refined.vcf'
    params: LSF='-q week -R "rusage[mem=8]" -M 16',
            refGenome=config["ref_genome"], year="2014", refName="zaire_guinea",
            logid="{sample}"
    # TODO: replace with one big python wrapper
    run:
            # tweak Trinity assembly w/muscle alignment to known reference
            shell("cat {input[0]} {params.refGenome} | /idi/sabeti-scratch/kandersen/bin/muscle/muscle -out {output[1]} -quiet")
            shell("{config[binDir]}/consensus.py modify_contig {output[1]} {output[2]} {params.refName} --name EBOV_{params.year}_{wildcards.sample} --call-reference-ns --trim-ends --replace-5ends --replace-3ends --replace-length 20 --replace-end-gaps")
            deambig_fasta(output[2], output[3])
            index_picard(output[2])
            index_novoalign(output[2])
            index_samtools(output[2])
            index_picard(output[3])
            index_samtools(output[3])
            # align sample's reads to its own muscle-modified consensus and replace bases with majority read count
            novoalign(input[1], input[2], output[2], wildcards.sample, output[4], options="-r Random -l 30 -g 40 -x 20 -t 502", min_qual=1)
            gatk_ug(output[4], output[3], output[5])
            vcf_to_fasta(output[5], output[6], options="--trim_ends --min_coverage 2")
            deambig_fasta(output[6], output[7])
            index_picard(output[6])
            index_novoalign(output[6])
            index_samtools(output[6])
            index_picard(output[7])
            index_samtools(output[7])
            # a second pass of align to self and refine
            novoalign(input[1], input[2], output[6], wildcards.sample, output[8], options="-r Random -l 40 -g 40 -x 20 -t 100", min_qual=1)
            gatk_ug(output[8], output[7], output[9])
            vcf_to_fasta(output[9], output[0], options="--trim_ends --min_coverage 2")

rule map_reads_to_assembly:
    input:  config["dataDir"]+'/'+config["subdirs"]["assembly"]+'/{sample}.fasta',
            config["tmpDir"] +'/'+config["subdirs"]["assembly"]+'/{sample}.cleaned.1.fastq',
            config["tmpDir"] +'/'+config["subdirs"]["assembly"]+'/{sample}.cleaned.2.fastq'
    output: config["dataDir"]+'/'+config["subdirs"]["assembly"]+'/{sample}.aligned_to_{sample}.bam',
            config["dataDir"]+'/'+config["subdirs"]["assembly"]+'/{sample}.aligned_to_{sample}.mapped.bam',
            config["dataDir"]+'/'+config["subdirs"]["assembly"]+'/{sample}.aligned_to_{sample}.rmdup.bam'
    params: LSF='-W 4:00 -R "rusage[mem=4]" -M 8',
            logid="{sample}"
    # TODO: replace with python wrapper
    run:
            index_picard(input[0])
            index_samtools(input[0])
            index_novoalign(input[0])
            novoalign(input[1], input[2], input[0], wildcards.sample, output[0], options="-r Random -l 40 -g 40 -x 20 -t 100 -k -c 3")
            filter_bam_mapped_only(output[0], output[1])
            picard_rmdup(output[1], output[2])
