"""
    This is a basic framework for depleting human and other contaminant 
    reads from NGS data.  All non-human reads should remain behind.
"""

__author__ = 'Kristian Andersen <andersen@broadinstitute.org>'

from snakemake.utils import makedirs
import os

rule revert_bam:
    input:  config["dataDir"]+'/'+config["subdirs"]["source"]+'/{sample}.bam'
    output: config["dataDir"]+'/'+config["subdirs"]["depletion"]+'/{sample}.raw.bam'
    params: LSF='-M 12 -R "rusage[mem=6]"',
            logid="{sample}"
    run:
            makedirs(expand("{dir}/{subdir}",
                dir=[config["dataDir"],config["tmpDir"]],
                subdir=config["subdirs"]["depletion"]))
            shell("{config[binDir]}/read_utils.py revert_bam_picard {input} {output} --picardOptions SORT_ORDER=queryname SANITIZE=true SAMPLE_ALIAS={wildcards.sample}")

rule split_bam:
    input:  config["dataDir"]+'/'+config["subdirs"]["depletion"]+'/{sample}.raw.bam'
    output: expand('{dir}/{{sample}}.raw.{split_id:04d}.bam', \
    			dir = config["tmpDir"] + '/' + config["subdirs"]["depletion"], \
                split_id = range(1,1+config["deplete_nchunks"]))
    params: LSF='-M 6 -R "rusage[mem=3]" -W 4:00',
            logid="{sample}"
    shell:	"{config[binDir]}/read_utils.py split_bam {input} {output}"

rule depl_bam_to_fastq:
    input:  '{dir}/{sample}.raw.{split_id,\d+}.bam'
    output: '{dir}/{sample}.raw.{split_id}.samheader.txt',
    		'{dir}/{sample}.raw.{split_id}.1.fastq',
    		'{dir}/{sample}.raw.{split_id}.2.fastq'
    params: LSF='-M 6 -R "rusage[mem=3]"',
            logid="{sample}-{split_id}"
    shell:	"{config[binDir]}/read_utils.py bam_to_fastq {input} {output[1]} {output[2]} --outHeader {output[0]}"

rule deplete_bmtagger:
    input:  '{dir}/{sample}.raw.{split_id}.1.fastq',
            '{dir}/{sample}.raw.{split_id}.2.fastq'
    #       expand("{dbdir}/{db}.{suffix}",
    #           dbdir=config["bmTaggerDbDir"],
    #           db=config["bmTaggerDbs_remove"],
    #           suffix=["bitmask","srprism.idx","srprism.map"])
    output: '{dir}/{sample}.bmtagger_depleted.{split_id,\d+}.1.fastq',
            '{dir}/{sample}.bmtagger_depleted.{split_id,\d+}.2.fastq'
    params: LSF='-W 4:00 -M 16 -R "rusage[mem=8]" -sp 40',
            refDbs = expand("{dbdir}/{db}", dbdir=config["bmTaggerDbDir"], db=config["bmTaggerDbs_remove"]),
            logid="{sample}-{split_id}"
    shell:  "{config[binDir]}/taxon_filter.py partition_bmtagger {input[0]} {input[1]} {params.refDbs} --outNoMatch {output}"

rule rmdup_mvicuna_split:
    input:
            expand('{{dir}}/{{sample}}.bmtagger_depleted.{split_id:04d}.{direction}.fastq',
                direction = [1,2],
                split_id = range(1,1+config["deplete_nchunks"]))
    output: 
            expand('{{dir}}/{{sample}}.rmdup.{split_id:04d}.{direction}.fastq',
                direction = [1,2],
                split_id = range(1,1+config["deplete_nchunks"]))
    params:
            LSF='-W 4:00 -M 16 -R "rusage[mem=8]" -sp 40',
            logid="{sample}",
            tmpf_input = expand(
                '{{dir}}/{{sample}}.bmtagger_depleted.{direction}.fastq',
                direction = [1,2]),
            tmpf_output = expand(
                '{{dir}}/{{sample}}.rmdup.{direction}.fastq',
                direction = [1,2])
    run:
            in1 = expand('{{dir}}/{{sample}}.bmtagger_depleted.{split_id:04d}.1.fastq',
                split_id = range(1,1+config["deplete_nchunks"]))
            in2 = expand('{{dir}}/{{sample}}.bmtagger_depleted.{split_id:04d}.2.fastq',
                split_id = range(1,1+config["deplete_nchunks"]))
            shell("cat {in1} > {params.tmpf_input[0]}")
            shell("cat {in2} > {params.tmpf_input[1]}")
            shell("{config[binDir]}/read_utils.py dup_remove_mvicuna {params.tmpf_input} {params.tmpf_output}")
            shell("{config[binDir]}/read_utils.py split_reads {params.tmpf_output[0]} {wildcards.dir}/{wildcards.sample}.rmdup. --numChunks {config[deplete_nchunks]} --indexLen=4 --outSuffix=.fastq")
            shell("{config[binDir]}/read_utils.py split_reads {params.tmpf_output[1]} {wildcards.dir}/{wildcards.sample}.rmdup. --numChunks {config[deplete_nchunks]} --indexLen=4 --outSuffix=.fastq")
            map(os.unlink, params.tmpf_input+params.tmpf_output)
            

rule deplete_blastn_paired:
    input:  '{dir}/{sample}.rmdup.{split_id}.1.fastq',
            '{dir}/{sample}.rmdup.{split_id}.2.fastq'
    output: '{dir}/{sample}.cleaned.{split_id,\d+}.1.fastq',
            '{dir}/{sample}.cleaned.{split_id,\d+}.2.fastq'
    params: LSF='-W 4:00 -M 16 -R "rusage[mem=8]" -sp 40',
            refDbs = expand("{dbdir}/{db}", dbdir=config["blastDbDir"], db=config["blastDb_remove"]),
            logid="{sample}-{split_id}"
    shell:  "{config[binDir]}/taxon_filter.py deplete_blastn_paired {input} {output} {params.refDbs}"

rule merge_to_bam:
    input:  config["tmpDir"]+'/'+config["subdirs"]["depletion"]+'/{sample}.raw.0001.samheader.txt',
            expand('{dir}/{{sample}}.cleaned.{split_id:04d}.{direction}.fastq',
                dir = config["tmpDir"]+'/'+config["subdirs"]["depletion"],
                direction = [1,2],
                split_id = range(1,1+config["deplete_nchunks"]))
    output: config["dataDir"]+'/'+config["subdirs"]["depletion"]+'/{sample}.cleaned.bam'
    params: LSF='-M 6 -R "rusage[mem=3]"',
            logid="{sample}",
            tmpf_fastq = [
                config["tmpDir"]+'/'+config["subdirs"]["depletion"]+'/{sample}.merge.cleaned.1.fastq',
                config["tmpDir"]+'/'+config["subdirs"]["depletion"]+'/{sample}.merge.cleaned.2.fastq'],
            infiles1 = expand('{dir}/{{sample}}.cleaned.{split_id:04d}.1.fastq',
                dir = config["tmpDir"]+'/'+config["subdirs"]["depletion"],
                split_id = range(1,1+config["deplete_nchunks"])),
            infiles2 = expand('{dir}/{{sample}}.cleaned.{split_id:04d}.2.fastq',
                dir = config["tmpDir"]+'/'+config["subdirs"]["depletion"],
                split_id = range(1,1+config["deplete_nchunks"]))
    run:
            shell("cat {params.infiles1} > {params.tmpf_fastq[0]}")
            shell("cat {params.infiles2} > {params.tmpf_fastq[1]}")
            shell("{config[binDir]}/read_utils.py fastq_to_bam {params.tmpf_fastq} {output} --header {input[0]}")
            map(os.unlink, params.tmpf_fastq)
