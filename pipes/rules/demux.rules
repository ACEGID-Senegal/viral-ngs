"""
    This is a basic framework for demultiplexing viral read data from
    the Broad Institute's walk-up sequencing platform.


    Basically the inputs are:
     - a tabular file describing sample name, library #, run #, barcode1 seq, and barcode2 seq
        for each sample. One such tab file per lane.
     - the flowcell ID and lane number
     - the Bustard directory (ask the person who did the run)
"""

__author__ = 'Kristian Andersen <andersen@broadinstitute.org>, Daniel Park <dpark@broadinstitute.org>'

from snakemake.utils import makedirs
import os, os.path, time, shutil


configfile: "config.json"

def read_tab_file(fname):
    with open(fname, 'rt') as inf:
        header = inf.readline().rstrip('\n').split('\t')
        for line in inf:
            yield dict(zip(header, line.rstrip('\n').split('\t')))

def get_bustard_dir(flowcell, lane, runfile):
    lanes = [x for x in read_tab_file(runfile) if x['flowcell']==flowcell and x['lane']==lane]
    assert len(lanes)==1
    return lanes[0]['bustard_dir']

def get_all_samples(runfile):
    for lane in read_tab_file(runfile):
        for well in read_tab_file(os.path.join('samples', lane['barcode_file'])):
            yield well['sample']

def get_bam_path(lane, well):
    run_id = well['sample']
    if well.get('library_id_per_sample'):
        run_id += '.l' + well['library_id_per_sample']
    if well.get('run_id_per_library'):
        run_id += '.r' + well['run_id_per_library']
    return os.path.join('bams', 'per_lane',
        lane['flowcell'] + '.' + lane['lane'],
        run_id + ".bam")


def all_basecalls_inputs(wildcards):
    for lane in read_tab_file('samples/runs.txt'):
        yield os.path.join('bams', 'per_lane', lane['flowcell']+'.'+lane['lane'],
            'Unmatched.bam')

rule all_demux_basecalls:
    input:  all_basecalls_inputs
    params: LSF="-N"
    run:
            print("echo all done!")

rule all_demux_merge:
    input:
            expand("bams/combined/{sample}.bam",
                sample=get_all_samples('samples/runs.txt')),
    params: LSF="-N"
    run:
            print("echo all done!")

rule make_picard_files:
    input:
            'samples/runs.txt',
            expand("samples/{file}",
                file = [x['barcode_file'] for x in read_tab_file('samples/runs.txt')])
    output:
            expand("samples/{file_type}.{lane_id}.txt",
                file_type = ['barcodeData','library_params'],
                lane_id = ['.'.join((x['flowcell'],x['lane'])) for x in read_tab_file('samples/runs.txt')])
    params: logid="all"
    run:
            for lane in read_tab_file(input[0]):
                shell("bin/broad_utils.py make_barcodes_file samples/{lane[barcode_file]} samples/barcodeData.{lane[flowcell]}.{lane[lane]}.txt")
                shell("bin/broad_utils.py make_params_file samples/{lane[barcode_file]} bams/per_lane/{lane[flowcell]}.{lane[lane]} samples/library_params.{lane[flowcell]}.{lane[lane]}.txt")

rule extract_barcodes:
    input:  'samples/barcodeData.{flowcell}.{lane}.txt'
    output: 'barcodes/{flowcell}.{lane}', 'barcodes/{flowcell}.{lane}/keepme.txt'
    params: LSF='-R "rusage[mem=16]" -W 4:00 -sp 60',
            logid="{flowcell}.{lane}",
            minimum_base_quality=config["demux_min_baseq"],
            max_mismatches=config["demux_max_mismatches"]
    run:
            makedirs('reports')
            shutil.rmtree(output[0], ignore_errors=True)
            makedirs(output[0])
            dir = get_bustard_dir(wildcards.flowcell, wildcards.lane, 'samples/runs.txt')
            shell("bin/broad_utils.py extract_barcodes {dir} {wildcards.lane} {input} {output[0]} --outMetrics=reports/barcodes-metrics-{wildcards.flowcell}.{wildcards.lane}.txt --max_mismatches={params.max_mismatches} --minimum_base_quality={params.minimum_base_quality}")
            shell("touch {output[1]}")

rule illumina_basecalls:
    input:  'samples/library_params.{flowcell}.{lane}.txt',
            'barcodes/{flowcell}.{lane}'
    output: expand("bams/per_lane/{{flowcell}}.{{lane}}/{run_id}.bam", run_id = "Unmatched")
    params: LSF='-R "rusage[mem=64]" -q flower',
            logid="{flowcell}.{lane}",
            outdir='barcodes/{flowcell}.{lane}'
    run:
            shutil.rmtree(params.outdir, ignore_errors=True)
            makedirs(params.outdir)
            dir = get_bustard_dir(wildcards.flowcell, wildcards.lane, 'samples/runs.txt')
            shell("bin/broad_utils.py illumina_basecalls {dir} {input[1]} {wildcards.flowcell} {wildcards.lane} {input[0]} --include_non_pf_reads=false")

def merge_bams_inputs(wildcards):
    for lane in read_tab_file('samples/runs.txt'):
        for well in read_tab_file(os.path.join('samples', lane['barcode_file'])):
            if well['sample']==wildcards.sample:
                yield get_bam_path(lane, well)

rule merge_bams:
    input:  merge_bams_inputs
    output: 'bams/combined/{sample}.bam'
    params: LSF='-R "rusage[mem=7]" -W 4:00',
            logid="{sample}"
    run:
            makedirs('bams/combined')
            shell("bin/read_utils.py merge_bams {input} {output} --picardOptions SORT_ORDER=queryname")

